import os, re, random, asyncio
from fastapi import FastAPI, Request, Response, Header
from telegram import Bot, Update
from telegram.constants import ParseMode

BOT_TOKEN = os.getenv("BOT_TOKEN", "")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")
if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN env")

bot = Bot(BOT_TOKEN)
app = FastAPI()
MENTION = re.compile(r"@[\w_]+")

# —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ –¥–ª—è "–ø—Ä–æ–ª–æ–≥–∞"
PHRASES = [
    "–ó–∞–ø—É—Å–∫–∞—é –∞–ª–≥–æ—Ä–∏—Ç–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞‚Ä¶ —à–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏ –∫—Ä—É—Ç—è—Ç—Å—è.",
    "–®–µ–ø—á—É –∏–º–µ–Ω–∞ –≤ —à–ª—è–ø—É —Å—É–¥—å–±—ã ‚Äî —Å–µ–π—á–∞—Å –≤—ã—Ç—è–Ω—É...",
    "–ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–¥–ø—Ä–æ–≥—Ä–∞–º–º–µ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏‚Ä¶",
    "–í–≥–ª—è–¥—ã–≤–∞—é—Å—å –≤ —Ö—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞—Ä‚Ä¶ –≤–∏–∂—É –∏–º—è, –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –∏–∑ —Ç—É–º–∞–Ω–∞...",
    "–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∑–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª...",
    "–ó–∞–≥–ª—è–¥—ã–≤–∞—é –≤ –±–µ–∑–¥–Ω—É —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ ‚Äî –∫—Ç–æ —Ç–∞–º –≤—Å–ø—ã—Ö–Ω–µ—Ç –ø–µ—Ä–≤—ã–º?",
    "–ó–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ—à—ë–ª –≤ –∫–æ–Ω—Ç—É—Ä, –∏—Å–∫—Ä—ã —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
    "–û—Ç–∫—Ä—ã–≤–∞—é —Å–∫—Ä—ã—Ç—ã–π —Ä–µ–≥–∏—Å—Ç—Ä —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π‚Ä¶",
    "–°–≤–µ—á–∞ –º–µ—Ä—Ü–∞–µ—Ç, –∞ —Ç–µ–Ω–∏ —à–µ–ø—á—É—Ç –∏–º—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...",
    "–ü–æ–¥–±—Ä–∞—Å—ã–≤–∞—é –∫–∏–Ω–∂–∞–ª —Å—É–¥—å–±—ã ‚Äî –∫—É–¥–∞ —É–∫–∞–∂–µ—Ç, —Ç–æ–≥–æ –∏ –≤—ã–±–µ—Ä–µ—Ç...",
    "–í–µ—Ç–µ—Ä –ø–µ—Ä–µ–º–µ—à–∞–ª –∏–º–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã—Ö–≤–∞—Ç–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –ø–æ—Ç–æ–∫–∞...",
    "–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–æ–Ω—Ç–∞–∫—Ç–∞ –∂–¥–∏—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É."
]

def extract_participants(msg):
    text = (msg.text or "").strip()
    out = set(MENTION.findall(text))
    for ent in (msg.entities or []):
        if ent.type == "mention":
            out.add(text[ent.offset: ent.offset + ent.length])
        elif ent.type == "text_mention" and ent.user and ent.user.username:
            out.add(f"@{ent.user.username}")
    if msg.reply_to_message and msg.reply_to_message.text:
        out.update(MENTION.findall(msg.reply_to_message.text))
    return list(out)

@app.get("/health")
async def health():
    return {"ok": True}

@app.get("/")
async def root():
    return {"ok": True}

async def send_with_delay(chat_id, reply_to_id, ppl):
    await asyncio.sleep(10)  # –∑–∞–¥–µ—Ä–∂–∫–∞ 10 —Å–µ–∫
    winner = random.choice(ppl)
    await bot.send_message(
        chat_id,
        f"üé≤ –Ω–∞—à –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∏ –æ—á–µ–Ω—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}",
        reply_to_message_id=reply_to_id,
        parse_mode=ParseMode.HTML
    )

@app.post("/webhook")
async def webhook(request: Request, x_telegram_bot_api_secret_token: str | None = Header(None)):
    if WEBHOOK_SECRET and x_telegram_bot_api_secret_token != WEBHOOK_SECRET:
        return Response("forbidden", 200)

    data = await request.json()
    upd = Update.de_json(data, bot)
    msg = getattr(upd, "message", None)
    if not msg or not msg.text:
        return Response("ok", 200)
    if not msg.text.lower().startswith("/random"):
        return Response("ok", 200)

    ppl = extract_participants(msg)
    if not ppl:
        await bot.send_message(
            msg.chat_id,
            "‚ùå –£–∫–∞–∂–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: <code>/random @user1 @user2 ‚Ä¶</code>",
            reply_to_message_id=msg.message_id,
            parse_mode=ParseMode.HTML
        )
        return Response("ok", 200)

    # –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    intro = random.choice(PHRASES)
    await bot.send_message(
        msg.chat_id,
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞. [{intro}]",
        reply_to_message_id=msg.message_id,
        parse_mode=ParseMode.HTML
    )

    # –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    asyncio.create_task(send_with_delay(msg.chat_id, msg.message_id, ppl))

    return Response("ok", 200)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000)

